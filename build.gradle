plugins {
	id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.24"
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '2.7.1'
}

group = 'bdd.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def versions = [
		openapi: '1.5.10',
		cucumber: '7.4.1',
		jjwt: '0.9.1'
]

repositories {
	mavenCentral()
}

sourceSets {
	testInt {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.testInt.java.srcDirs
		testSourceDirs += project.sourceSets.testInt.resources.srcDirs
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	// Need this to start @SpringBootTest
	testIntImplementation {
		extendsFrom implementation
	}

	// Need this to start @SpringBootTest
	testIntRuntimeOnly {
		extendsFrom runtimeOnly
	}
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testIntAnnotationProcessor 'org.projectlombok:lombok'
	testIntCompileOnly 'org.projectlombok:lombok'
	testIntImplementation 'org.springframework.boot:spring-boot-starter-test'
	testIntImplementation(platform("io.cucumber:cucumber-bom:${versions.cucumber}"))
	testIntImplementation("io.cucumber:cucumber-java")
	testIntImplementation("io.cucumber:cucumber-junit-platform-engine")
	testIntImplementation("io.cucumber:cucumber-spring")
	testIntImplementation("org.junit.platform:junit-platform-suite")
	testIntImplementation("org.junit.jupiter:junit-jupiter")

}

task testInt(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	// Always run integration test
	outputs.upToDateWhen { false }
	testClassesDirs = sourceSets.testInt.output.classesDirs
	classpath = sourceSets.testInt.runtimeClasspath
	shouldRunAfter test
}

check.configure {
	// check task depends on testInt and jacocoTestCoverageVerification
	// when you run ./gradlew check testInt and jacocoTestCoverageVerification tasks are also run
	dependsOn testInt
	dependsOn jacocoTestCoverageVerification
}

cucumberReports {
	buildId = '0'
	outputDir = file("${buildDir}/reports/cucumber")
	reports = files("${buildDir}/reports/cucumber/cucumber-report.json")
}

jacocoTestCoverageVerification {
	dependsOn testInt
	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}
	violationRules {
		rule {
			element = 'CLASS'
			excludes = [
					'bdd.demo.ecommerce.EcommerceApplication',	         // ignore the main application
					'bdd.*.Constants',	                                 // ignore all the constant files
					'bdd.demo.ecommerce.customer.CustomerController'	 // ignore for now. TODO: implement test for the controller
			]
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.95
			}
		}
	}
}

jacocoTestReport {
	// https://stackoverflow.com/questions/19025138/gradle-how-to-generate-coverage-report-for-integration-test-using-jacoco
	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}

	reports {
		xml.required = true
		// HTML report: build/reports/jacoco/test/html/index.html
		html.required = true
	}
}

tasks.withType(Test) {
	useJUnitPlatform()

	// Need the following to show the output when running from the console
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
	}
	testLogging.showStandardStreams = false
	finalizedBy jacocoTestReport // report is always generated after tests run
}
